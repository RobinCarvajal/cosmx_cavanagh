# Data Disk ----------------------------------------------------------
disk <- "F:"
# Scripts Directory -------------------------------------------------------
scripts_dir <- file.path(disk, "cosmx_scripts")
# Set up Directory --------------------------------------------------------
setup_dir <- file.path(scripts_dir,"set_up")
# Data Directories --------------------------------------------------------
data_dir <- file.path(disk, "cosmx_data")
##### objects #####
objects_dir <- file.path(data_dir, "objects")
##### single cell #####
single_cell_dir <- file.path(data_dir, "single_cell")
##### niches #####
niches_dir <- file.path(data_dir, "niches")
#### running scripts
# Libraries
source(file.path(setup_dir, "Libraries.R"))
# Functions
source(file.path(setup_dir, "Functions.R"))
source(file.path(setup_dir, "FN_differential_expression.R"))
samples <- list.files(file.path(data_dir,"regional","segmentation_mask_coords"),
full.names = F, recursive = F)
#  load brain object ------------------------------------------------------
brain <- readRDS(file.path(objects_dir,"brain_objects",
"05_11_2024_brain_v1.5_broad.labels_added.RDS"))
#  load brain object ------------------------------------------------------
brain <- readRDS(file.path(objects_dir,"brain_objects",
"2024_11_22_brain_v1.6_fine.labels_added.RDS"))
# brain metadata
brain.metadata <- brain@meta.data
# create an empty list to store the polygon objects
mask.coords <- list()
# loop to add all polygons to its object
for (sample in samples){
# extracting all the paths of the mask coordinates files
mask_list <- list.files(file.path(data_dir,"regional","segmentation_mask_coords",sample),
full.names = T, recursive = F)
# loop to add all the mask coordinates to its sample
# and create the polygon object
for (mask in mask_list){
# name
mask_name <- file_path_sans_ext(basename(mask))
# path
mask_path <- mask
# read the mask coordinates
mask_df <- read.csv(mask_path)
# Create the polygon using the coordinates
coords <- as.matrix(mask_df)
polygon <- Polygon(coords)
spatial_polygon <- Polygons(list(polygon), ID = mask_name)
spatial_polygon_object <- SpatialPolygons(list(spatial_polygon))
# assigning the polygon object to the mask.coords list
mask.coords[[sample]][[mask_name]] <- spatial_polygon_object
}
}
View(mask.coords)
mask.coords[["s1055ant_bs1"]]
mask.coords[["s1055ant_bs1"]][[mask_name]]
mask_name
mask.coords[["s1055ant_bs1"]]$`s1055ant_bs1-agranular_insula_coords`
mask.coords[["s1055ant_bs1"]][["s1055ant_bs1-agranular_insula_coords"]]
mask_name
current_mask <- "s1055ant_bs1-agranular_insula_coords"
mask.coords[["s1055ant_bs1"]][[current_mask]]
plot(mask.coords[["s1055ant_bs1"]][[current_mask]], col = "lightblue", border = "black")
# empty list to add SpatialPoints object per sample
brain.coords <- list()
# loop to add the spatial objects based on brain coords
for (sample in samples){
brain.coords[[sample]] <- brain.metadata %>%
filter(sample_name == sample) %>%
select(x_slide_mm, y_slide_mm) %>%
as.matrix() %>%
SpatialPoints()
}
plot(brain.coords$s1055ant_bs2)
brain.coords
View(brain.coords)
# empty list to store the inside points
inside_points <- list()
# loop to check if the points are inside the polygon
for (sample in samples){
points <- brain.coords[[sample]]
for (mask_name in names(mask.coords[[sample]])){
mask <- mask.coords[[sample]][[mask_name]]
inside_polygon <- !is.na(over(points, mask))
inside_polygon_df <- data.frame(inside_polygon)
names(inside_polygon_df)[1] <- "inside"
# Get the row names of points that are inside the polygon
inside_polygon_cells <- row.names(subset(inside_polygon_df, inside == TRUE))
# remove "coords" from the mask_name
mask_name <- gsub("_coords", "", mask_name)
inside_points[[sample]][[mask_name]] <- inside_polygon_cells
}
}
View(inside_points)
inside_points[["s1055ant_bs1"]][["s1055ant_bs1-agranular_insula"]]
cortex.cells <- inside_points[["s1055ant_bs1"]][[current_mask]]
cortex.sub <- subset(brain, cells =  cortex.cells)
ImageDimPlot(cortex.sub, boundaries = "centroids", coord.fixed = T, flip_xy = F)
cortex.cells
inside_points[["s1055ant_bs1"]][[current_mask]]
View(inside_points)
inside_points[["s1055ant_bs1"]][["s1055ant_bs1-agranular_insula"]]
cortex.cells <- inside_points[["s1055ant_bs1"]][["s1055ant_bs1-agranular_insula"]]
cortex.sub <- subset(brain, cells =  cortex.cells)
ImageDimPlot(cortex.sub, boundaries = "centroids", coord.fixed = T, flip_xy = F)
ImageDimPlot(cortex.sub, boundaries = "segmentation", coord.fixed = T, flip_xy = F)
cortex.sub
current_mask
View(mask.coords)
inside_points
View(inside_points)
# empty list to store the inside points
inside_points <- list()
# loop to check if the points are inside the polygon
for (sample in samples){
points <- brain.coords[[sample]]
for (mask_name in names(mask.coords[[sample]])){
mask <- mask.coords[[sample]][[mask_name]]
inside_polygon <- !is.na(over(points, mask))
inside_polygon_df <- data.frame(inside_polygon)
names(inside_polygon_df)[1] <- "inside"
# Get the row names of points that are inside the polygon
inside_polygon_cells <- row.names(subset(inside_polygon_df, inside == TRUE))
# remove "coords" from the mask_name
mask_name <- gsub("_coords", "", mask_name)
# remove the sample name from the mask name
mask_name <- gsub(paste0(sample,"-"), "", mask_name)
inside_points[[sample]][[mask_name]] <- inside_polygon_cells
}
}
View(inside_points)
inside_points[["s1055ant_bs1"]][["agranular_insula"]]
cortex.cells <- inside_points[["s1055ant_bs1"]][["agranular_insula"]]
cortex.sub <- subset(brain, cells =  cortex.cells)
ImageDimPlot(cortex.sub, boundaries = "segmentation", coord.fixed = T, flip_xy = F)
names(mask.coords[[sample]]))
names(mask.coords[[sample]])
cortex.cells <- inside_points[["s1055ant_bs1"]][["secondary_motor_area"]]
cortex.sub <- subset(brain, cells =  cortex.cells)
ImageDimPlot(cortex.sub, boundaries = "segmentation", coord.fixed = T, flip_xy = F)
inside_points
View(inside_points)
cortex.cells <- inside_points[["s1055ant_bs1"]][["secondary_motor_cortex"]]
cortex.sub <- subset(brain, cells =  cortex.cells)
ImageDimPlot(cortex.sub, boundaries = "segmentation", coord.fixed = T, flip_xy = F)
View(inside_points)
